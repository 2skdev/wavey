{
  // change snake case to pascal case
  // ${1/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}
  // change snake case to camel case
  // ${1/_([a-z])/${1:/upcase}/g}
  "freezed state": {
    "prefix": "freezed",
    "description": "generate freezed state",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "",
      "@freezed",
      "class ${TM_FILENAME_BASE/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g} with _$${TM_FILENAME_BASE/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g} {",
      "  const factory ${TM_FILENAME_BASE/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}({",
      "    $1,",
      "  }) = _${TM_FILENAME_BASE/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g};",
      "}"
    ]
  },
  "freezed state with json serialize": {
    "prefix": "freezed json",
    "description": "generate freezed state with json serialize",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@freezed",
      "class ${TM_FILENAME_BASE/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g} with _$${TM_FILENAME_BASE/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g} {",
      "  const factory ${TM_FILENAME_BASE/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}({",
      "    $1,",
      "  }) = _${TM_FILENAME_BASE/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g};",
      "",
      "  factory ${TM_FILENAME_BASE/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}.fromJson(Map<String, dynamic> json) => _$${TM_FILENAME_BASE/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}FromJson(json);",
      "}"
    ]
  },
  "freezed state notifier": {
    "prefix": "provider",
    "description": "generate freezed state notifier (input snake case file name)",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "import '../models/$1.dart';",
      "",
      "class ${1/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}Notifier extends StateNotifier<${1/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}> {",
      "  ${1/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}Notifier() : super(const ${1/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}());",
      "}",
      "",
      "final ${1/_([a-z])/${1:/upcase}/g}Notifier = StateNotifierProvider<${1/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}Notifier, ${1/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}>(",
      "  (_) => ${1/(^[a-z])|_([a-z])/${1:/upcase}${2:/upcase}/g}Notifier(),",
      ");"
    ]
  }
}
